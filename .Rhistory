q()
print('hello R')
q()
installed.package('rjags')
install.packages('rjags')
library(rjags)
install.packages('coda')
install.packages("coda")
library(rjags)
install.packages("rjags")
install.packages('jags')
library('rjags')
gflu=read.csv("http://www.google.org/flutrends/about/data/flu/us/data.txt",skip = 11)
gflu=read.csv("https://raw.githubusercontent.com/EcoForecast/EF_Activities/master/data/gflu_data.txt",skip = 11)
View(gflu)
time = as.Date(gflu$Date)
y = gflu$Florida
plot(time, y, type = 'l')
data = list(
y = y,
n = length(y),
x_ic = 1000,
tau_ic = 1,
a_obs = 1,
r_obs = 1,
a_proc = 1,
r_proc = 1
)
random_walk = "
model{
#### Observation Model
for (t in 1:n){
y[t] ~ dnorm(x[t], tau_obs)
}
#### Process Model
for (t in 2:n){
x[t] ~ dnorm(x[t-1], tau_proc)
}
#### Priors
x[1] ~ dnorm(x_ic, tau_ic)
tau_obs ~ dgamma(a_obs, r_obs)
tau_proc ~ dgamma(a_proc, r_proc)
}
"
init = list(list(tau_proc = 1/var(diff(y)), tau_obs = 5/var(y)))
j_model = jags.model(file = textConnection(random_walk),
data = data,
inits = init,
n.chains = 1)
jags_out = coda.samples(model = j_model,
variable.names = c("tau_proc","tau_obs"),
n.iter = 10000)
plot(jags_out)
jags_out = coda.samples(model = j_model,
variable.names = c("x", "tau_proc", "tau_obs"),
n.iter = 10000)
output = as.matrix(jags_out)
View(output)
xs = output[,3:ncol(output)]
View(xs)
predictions = colMeans(xs)
plot(time, predictions)
plot(time, predictions,type = 'l')
pred_interval = apply(xs, 2, quantile, c(0.025, 0.975))
lines(time, pred_interval)
lines(time, pred_interval[])
print(length(time))
print(length(pred_interval))
lines(time, pred_interval[1,],lty="dashed",col="blue")
lines(time, pred_interval[2,],lty="dashed",col="blue")
data$y[(length(y)-51):length(y)] = NA
init = list(list(tau_proc = 1/var(diff(y)), tau_obs = 5/var(y)))
j_model = jags.model(file = textConnection(random_walk),
data = data,
inits = init,
n.chains = 1)
jags_out = coda.samples(model = j_model,
variable.names = c("tau_proc","tau_obs"),
n.iter = 10000)
plot(jags_out)
jags_out = coda.samples(model = j_model,
variable.names = c("x", "tau_proc", "tau_obs"),
n.iter = 10000)
output = as.matrix(jags_out)
xs = output[,3:ncol(output)]
predictions = colMeans(xs)
plot(time, predictions,type = 'l')
pred_interval = apply(xs, 2, quantile, c(0.025, 0.975))
lines(time, pred_interval[1,],lty="dashed",col="blue")
lines(time, pred_interval[2,],lty="dashed",col="blue")
hist(1/sqrt(output[,1]))
hist(1/sqrt(output[,2]))
lines(time, pred_interval[1,],lty="dashed",col="blue")
lines(time, pred_interval[2,],lty="dashed",col="blue")
plot(jags_out)
jags_out = coda.samples(model = j_model,
variable.names = c("x", "tau_proc", "tau_obs"),
n.iter = 10000)
output = as.matrix(jags_out)
xs = output[,3:ncol(output)]
predictions = colMeans(xs)
plot(time, predictions,type = 'l')
pred_interval = apply(xs, 2, quantile, c(0.025, 0.975))
lines(time, pred_interval[1,],lty="dashed",col="blue")
lines(time, pred_interval[2,],lty="dashed",col="blue")
hist(1/sqrt(output[,1]))
hist(1/sqrt(output[,2]))
gflu=read.csv("https://raw.githubusercontent.com/EcoForecast/EF_Activities/master/data/gflu_data.txt",skip = 11)
time = as.Date(gflu$Date)
y = gflu$Florida
plot(time, y, type = 'l')
random_walk = "
model{
#### Observation Model
for (t in 1:n){
y[t] ~ dnorm(x[t], tau_obs)
}
#### Process Model
for (t in 2:n){
x[t] ~ dnorm(x[t-1], tau_proc)
}
#### Priors
x[1] ~ dnorm(x_ic, tau_ic)
tau_obs ~ dgamma(a_obs, r_obs)
tau_proc ~ dgamma(a_proc, r_proc)
}
"
data = list(
y = y,
n = length(y),
x_ic = 1000,
tau_ic = 1,
a_obs = 1,
r_obs = 1,
a_proc = 1,
r_proc = 1
)
data$y[(length(y)-51):length(y)] = NA
init = list(list(tau_proc = 1/var(diff(y)), tau_obs = 5/var(y)))
j_model = jags.model(file = textConnection(random_walk),
data = data,
inits = init,
n.chains = 1)
jags_out = coda.samples(model = j_model,
variable.names = c("tau_proc","tau_obs"),
n.iter = 10000)
plot(jags_out)
jags_out = coda.samples(model = j_model,
variable.names = c("x", "tau_proc", "tau_obs"),
n.iter = 10000)
output = as.matrix(jags_out)
xs = output[,3:ncol(output)]
predictions = colMeans(xs)
plot(time, predictions,type = 'l')
lines(time, pred_interval[1,],lty="dashed",col="blue")
lines(time, pred_interval[2,],lty="dashed",col="blue")
plot(time, predictions,type = 'l')
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
Sys.which('make')
install.packages("jsonlite", type = "source")
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
data("AirPassengers")
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN = mean))
boxplot(AirPassengers~cycle(AirPassengers))
boxplot(AirPassengers~time(AirPassengers))
data("AirPassengers")
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN = mean))
boxplot(AirPassengers~cycle(AirPassengers))
boxplot(AirPassengers~time(AirPassengers))
library(stpm)
installed.packages("devtools")
library(devtools)
install_github("izhbannikov/spm")
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
library(ctsmr)
installed.packages("astsa")
library(astsa)
install.packages("astsa")
library(astsa)
.First <- function(){library(astsa)}
z=rnorm(5)
z
z.sum
set.seed(0)
x=rnorm(25,10,4)
x
sum(z)
sum(x)
which.max(z)
load("C:/Users/Vaibhav Gupta/Documents/R/timeseries_prac/tsa3.rda")
gold=read.csv(file="gold_price.csv",header = TRUE,sep=',')
silver=read.csv(file="silver_price.csv",header=T,sep=',')
gold=data.frame(gold)
silver=data.frame(silver)
gold[is.na(gold)]<-0
df=merge(gold,silver,by.x=c('date'),by.y = c('date'))
names(df)[names(df)=='price.x']<-'gold'
names(df)[names(df)=='price.y']<-'silver'
n=nrow(df)
m=ncol(df)
acf2=function(series,max.lag=NULL){
num=length(series)
if(is.null(max.lag)) max.lag=ceiling(10+sqrt(num))
if(max.lag>(num-1)) stop("Number of lags exceeds number of observations")
ACF=af(series,max.lag,plot=FALSE)$acf[-1]
PACF=pacf(series, max.lag, plot=FALSE)$acf
LAG=1:max.lag/frequency(series)
minA=min(ACF)
minP=min(PACF)
U=2/sqrt(num)
L=-U
minu=min(minA,minP,L)-.01
ACF<-round(ACF,2); PACF<-round(PACF,2)
return(cbind(LAG, ACF, PACF) )
}
gold<-ts(as.numeric(data.matrix(df$gold)),start=c(1968,1,2),end=c(2021,4,7),frequency=365)
silver<-ts(as.numeric(data.matrix(df$silver)),start=c(1968,1,2),end=c(2021,4,7),frequency=365)
plot(cbind(gold,silver))
gold<-ts(as.numeric(data.matrix(df$gold)),start=c(1968,1),end=c(2021,4),frequency=12)
gold<-ts(df$gold,start = (1968,1),end=(2021,4),frequency=12)
gold<-ts(df$gold,start = c(1968,1),end=c(2021,4),frequency=12)
setwd("C:/Users/Vaibhav Gupta/Desktop/github/mathtech timeseries")
plot(cars)
library(forecast)
library(ggplot2)
library(tseries)
library(summarytools)
gold=read.csv(file="gold_price.csv",header = TRUE,sep=',')
class(gold)
#Observations of the time series data
gold
#Summary of the data and missi
dfSummary(gold)
gold[is.na(gold)]<-37.699
class(gold)
#Observations of the time series data
gold
gold=read.csv(file="gold_price.csv",header = TRUE,sep=',')
gold[is.na(gold)]<-37.699
class(gold)
#Observations of the time series data
gold
#Summary of the data and missi
dfSummary(gold)
View(gold)
as.data.frame(tsdata)
as.data.frame(gold)
cycle(gold)
plot(gold, ylab="Price", type="o")
tsdata_decom <- decompose(gold, type = "multiplicative")
